"""
输出生成模块 - 负责生成讲解文档
"""
import json
from pathlib import Path
from typing import List, Dict, Tuple
from datetime import datetime

class OutputGenerator:
    """输出生成器"""
    
    def __init__(self, output_dir: str, pdf_name: str):
        """
        初始化输出生成器
        
        Args:
            output_dir: 输出目录
            pdf_name: PDF文件名
        """
        self.output_dir = Path(output_dir)
        self.pdf_name = pdf_name
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def generate_markdown(self, analyses: List[Tuple[int, str, str]]) -> str:
        """
        生成Markdown格式的讲解文档
        
        Args:
            analyses: List of (page_num, image_path, analysis_text) tuples
            
        Returns:
            生成的Markdown文件路径
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # 构建Markdown内容
        md_content = f"""# 课件讲解: {self.pdf_name}

> 生成时间: {timestamp}
> 总页数: {len(analyses)}

---

"""
        
        for page_num, image_path, analysis in analyses:
            # 相对路径(用于Markdown链接)
            rel_image_path = Path(image_path).relative_to(self.output_dir)
            
            md_content += f"""## 第 {page_num} 页

![第{page_num}页]({rel_image_path.as_posix()})

{analysis}

---

"""
        
        # 添加页脚
        md_content += f"""
## 文档说明

- 本文档由PDF课件自动讲解系统生成
- 每页内容包含课件截图和AI详细讲解
- 建议结合原始课件一起学习

---
*Generated by PDF Lecture Analyzer*
"""
        
        # 保存Markdown文件
        output_file = self.output_dir / f"{Path(self.pdf_name).stem}_explained.md"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(md_content)
            
        return str(output_file)
    
    def generate_html(self, analyses: List[Tuple[int, str, str]]) -> str:
        """
        生成HTML格式的讲解文档
        
        Args:
            analyses: List of (page_num, image_path, analysis_text) tuples
            
        Returns:
            生成的HTML文件路径
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # HTML模板
        html_content = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>课件讲解: {self.pdf_name}</title>
    <style>
        body {{
            font-family: 'Microsoft YaHei', Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
            line-height: 1.8;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }}
        .header h1 {{
            margin: 0 0 10px 0;
            font-size: 2em;
        }}
        .header .meta {{
            opacity: 0.9;
            font-size: 0.9em;
        }}
        .page-section {{
            background: white;
            margin-bottom: 30px;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }}
        .page-header {{
            background: #4a5568;
            color: white;
            padding: 15px 20px;
            font-size: 1.3em;
            font-weight: bold;
        }}
        .page-content {{
            padding: 20px;
        }}
        .page-image {{
            width: 100%;
            max-width: 100%;
            height: auto;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .analysis {{
            font-size: 1em;
            color: #2d3748;
            white-space: pre-wrap;
        }}
        .footer {{
            text-align: center;
            padding: 20px;
            color: #718096;
            font-size: 0.9em;
        }}
        h2, h3, h4 {{
            color: #2d3748;
            margin-top: 1.5em;
        }}
        strong {{
            color: #667eea;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>📚 {self.pdf_name}</h1>
        <div class="meta">
            生成时间: {timestamp} | 总页数: {len(analyses)}
        </div>
    </div>
"""
        
        # 添加每页内容
        for page_num, image_path, analysis in analyses:
            rel_image_path = Path(image_path).relative_to(self.output_dir)
            
            # 将Markdown格式的分析文本转换为HTML(简单处理)
            html_analysis = self._markdown_to_html(analysis)
            
            html_content += f"""
    <div class="page-section">
        <div class="page-header">第 {page_num} 页</div>
        <div class="page-content">
            <img src="{rel_image_path.as_posix()}" alt="第{page_num}页" class="page-image">
            <div class="analysis">{html_analysis}</div>
        </div>
    </div>
"""
        
        html_content += """
    <div class="footer">
        <p>本文档由 <strong>PDF课件自动讲解系统</strong> 生成</p>
        <p>建议结合原始课件一起学习</p>
    </div>
</body>
</html>
"""
        
        # 保存HTML文件
        output_file = self.output_dir / f"{Path(self.pdf_name).stem}_explained.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        return str(output_file)
    
    def save_cache(self, analyses: List[Tuple[int, str, str]], cache_dir: str):
        """
        保存分析结果到缓存
        
        Args:
            analyses: List of (page_num, image_path, analysis_text) tuples
            cache_dir: 缓存目录
        """
        cache_path = Path(cache_dir)
        cache_path.mkdir(parents=True, exist_ok=True)
        
        cache_data = {
            'pdf_name': self.pdf_name,
            'timestamp': datetime.now().isoformat(),
            'analyses': [
                {
                    'page_num': page_num,
                    'image_path': image_path,
                    'analysis': analysis
                }
                for page_num, image_path, analysis in analyses
            ]
        }
        
        cache_file = cache_path / f"{Path(self.pdf_name).stem}_cache.json"
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, ensure_ascii=False, indent=2)
    
    def load_cache(self, cache_dir: str) -> List[Tuple[int, str, str]]:
        """
        从缓存加载分析结果
        
        Args:
            cache_dir: 缓存目录
            
        Returns:
            List of (page_num, image_path, analysis_text) tuples or None
        """
        cache_path = Path(cache_dir)
        cache_file = cache_path / f"{Path(self.pdf_name).stem}_cache.json"
        
        if not cache_file.exists():
            return None
            
        try:
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                
            return [
                (item['page_num'], item['image_path'], item['analysis'])
                for item in cache_data['analyses']
            ]
        except Exception:
            return None
    
    def _markdown_to_html(self, markdown_text: str) -> str:
        """简单的Markdown到HTML转换"""
        html = markdown_text
        
        # 粗体
        import re
        html = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', html)
        
        # 标题
        html = re.sub(r'^### (.+)$', r'<h4>\1</h4>', html, flags=re.MULTILINE)
        html = re.sub(r'^## (.+)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
        html = re.sub(r'^# (.+)$', r'<h2>\1</h2>', html, flags=re.MULTILINE)
        
        # 换行
        html = html.replace('\n\n', '</p><p>')
        html = f'<p>{html}</p>'
        
        return html
